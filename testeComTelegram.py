import requests
from bs4 import BeautifulSoup
import re
import telegram
import asyncio
import os
import time
import schedule
import json # ### NOVO ###: Biblioteca para manipular arquivos JSON

# Pega o caminho absoluto do diret√≥rio onde o script est√°
DIRETORIO_ATUAL = os.path.dirname(os.path.abspath(__file__))

# SEU BOT_TOKEN E CHAT_ID
BOT_TOKEN = "7864806675:AAEg5rwZ_z2yPUmUkidYbuSPHjSTZb4m_K4"
CHAT_ID = "-1002512544169"

# URLS DA BERZERK
URL_BASE = 'https://berzerk.com.br'
URL_PAGINA = f'{URL_BASE}/collections/outlet'

# ### ALTERA√á√ÉO ###: Nome do arquivo de mem√≥ria agora √© .json
ARQUIVO_MEMORIA_JSON = os.path.join(DIRETORIO_ATUAL, 'produtos_monitorados.json')

# --- FUN√á√ïES AUXILIARES ---

def escapar_markdown_v2(texto: str) -> str:
    caracteres_reservados = r'([_*\[\]()~`>#+\-=|{}.!])'
    return re.sub(caracteres_reservados, r'\\\1', texto)

# ### ALTERA√á√ÉO ###: Fun√ß√£o para carregar dados do arquivo JSON
def carregar_dados_salvos() -> dict:
    """Carrega os dados dos produtos do arquivo JSON e retorna um dicion√°rio."""
    if not os.path.exists(ARQUIVO_MEMORIA_JSON):
        return {}
    try:
        with open(ARQUIVO_MEMORIA_JSON, 'r', encoding='utf-8') as f:
            lista_produtos = json.load(f)
            # Transforma a lista de produtos em um dicion√°rio para busca r√°pida pelo link
            return {produto['link']: produto for produto in lista_produtos}
    except (json.JSONDecodeError, IOError):
        # Se o arquivo estiver corrompido ou vazio, come√ßa do zero
        return {}

# ### NOVO ###: Fun√ß√£o para salvar todos os produtos no arquivo JSON
def salvar_dados_produtos(dados_produtos: dict):
    """Salva o dicion√°rio de produtos de volta em uma lista no arquivo JSON."""
    with open(ARQUIVO_MEMORIA_JSON, 'w', encoding='utf-8') as f:
        # Converte os valores do dicion√°rio (que s√£o os dados do produto) em uma lista
        lista_para_salvar = list(dados_produtos.values())
        json.dump(lista_para_salvar, f, indent=4, ensure_ascii=False)

async def send_telegram_message(bot_token, chat_id, message):
    try:
        bot = telegram.Bot(token=bot_token)
        await bot.send_message(chat_id=chat_id, text=message, parse_mode='MarkdownV2')
        print(f"‚úÖ Notifica√ß√£o enviada com sucesso para o Telegram!")
    except Exception as e:
        print(f"‚ùå Falha ao enviar mensagem para o Telegram: {e}")

# --- FUN√á√ÉO PRINCIPAL (COM A NOVA L√ìGICA) ---

async def monitorar_berzerk():
    print("ü§ñ Iniciando monitoramento de produtos e pre√ßos na Berzerk...")
    
    dados_salvos = carregar_dados_salvos()
    print(f"üìÑ Encontrados {len(dados_salvos)} produtos na mem√≥ria JSON.")

    # Dicion√°rio para guardar os dados atuais dos produtos para salvar no final
    dados_produtos_atuais = dados_salvos.copy()
    notificacoes_enviadas = 0

    try:
        pagina = requests.get(URL_PAGINA, headers={'User-Agent': 'Mozilla/5.0'})
        pagina.raise_for_status()
        dados_pagina = BeautifulSoup(pagina.text, 'html.parser')

        tags_de_link = dados_pagina.select('a[href*="/products/"]')
        blocos_de_info = dados_pagina.find_all('div', class_="v-stack gap-0.5 w-full justify-items-center")

        links_unicos = []
        links_vistos = set()
        for tag in tags_de_link:
            href = tag['href']
            if href not in links_vistos:
                links_unicos.append(URL_BASE + href)
                links_vistos.add(href)
        
        if not links_unicos or not blocos_de_info:
            print("‚ö†Ô∏è N√£o foi poss√≠vel encontrar produtos na p√°gina. Verifique o site.")
            return

        print(f"üîé Encontrados {len(links_unicos)} produtos na p√°gina. Verificando novidades e altera√ß√µes...")

        for link_completo, info_div in zip(links_unicos, blocos_de_info):
            nome_tag = info_div.find('span', class_="product-card__title")
            nome = nome_tag.text.strip() if nome_tag else "Nome n√£o encontrado"
            
            preco_tag = info_div.find('sale-price', class_="text-on-sale")
            preco_atual_texto = "Pre√ßo n√£o encontrado"
            if preco_tag:
                preco_atual_texto = preco_tag.text.replace("Pre√ßo promocional", "").strip()

            # Prepara os dados do produto atual para compara√ß√µes e para salvar
            info_produto_atual = {'link': link_completo, 'nome': nome, 'preco': preco_atual_texto}

            ### ### ALTERA√á√ÉO CENTRAL DA L√ìGICA ### ###

            # Cen√°rio 1: O produto √© NOVO
            if link_completo not in dados_salvos:
                print(f"üéâ NOVO PRODUTO ENCONTRADO: {nome}")
                notificacoes_enviadas += 1
                
                message = (
                    f"üö® *NOVO DROP NA BERZERK* üö®\n\n"
                    f"üëï *Produto*: {escapar_markdown_v2(nome)}\n"
                    f"üí∞ *Pre√ßo*: {escapar_markdown_v2(preco_atual_texto)}\n\n"
                    f"üîó *Acesse agora mesmo*:\n"
                    f"[Clique aqui para ver o produto]({link_completo})"
                )
                await send_telegram_message(BOT_TOKEN, CHAT_ID, message)
                dados_produtos_atuais[link_completo] = info_produto_atual
            
            # Cen√°rio 2: O produto J√Å EXISTE, verificar altera√ß√£o de pre√ßo
            else:
                preco_salvo = dados_salvos[link_completo].get('preco', 'Pre√ßo n√£o salvo')
                if preco_atual_texto != preco_salvo and preco_atual_texto != "Pre√ßo n√£o encontrado":
                    print(f"üí∞ ALTERA√á√ÉO DE PRE√áO: {nome}")
                    notificacoes_enviadas += 1
                    
                    message = (
                        f"üí∏ *ALTERA√á√ÉO DE PRE√áO DETECTADA* üí∏\n\n"
                        f"üëï *Produto*: {escapar_markdown_v2(nome)}\n"
                        f"üìâ *Pre√ßo Antigo*: {escapar_markdown_v2(preco_salvo)}\n"
                        f"üìà *Pre√ßo Novo*: {escapar_markdown_v2(preco_atual_texto)}\n\n"
                        f"üîó *Acesse agora mesmo*:\n"
                        f"[Clique aqui para ver o produto]({link_completo})"
                    )
                    await send_telegram_message(BOT_TOKEN, CHAT_ID, message)
                    dados_produtos_atuais[link_completo] = info_produto_atual
            
            await asyncio.sleep(1) # Pausa entre as verifica√ß√µes para n√£o sobrecarregar

        # Cen√°rio 3: N√£o houve nenhuma notifica√ß√£o (nem novo, nem altera√ß√£o)
        if notificacoes_enviadas == 0:
            print("‚úÖ Nenhuma novidade ou altera√ß√£o de pre√ßo encontrada.")
            mensagem_sem_novidades = "‚úÖ Nenhuma nova promo√ß√£o ou altera√ß√£o de pre√ßo encontrada no outlet da Berzerk desta vez\\."
            await send_telegram_message(BOT_TOKEN, CHAT_ID, mensagem_sem_novidades)

        # Salva o estado mais recente de todos os produtos encontrados na p√°gina
        salvar_dados_produtos(dados_produtos_atuais)
        print(f"üíæ Dados de {len(dados_produtos_atuais)} produtos foram salvos no JSON.")
        
        print("üèÅ Monitoramento finalizado.")

    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erro de conex√£o ao acessar a p√°gina da Berzerk: {e}")
    except Exception as e:
        print(f"‚ùå Ocorreu um erro inesperado: {e}")
        # Em caso de erro, √© mais seguro n√£o sobrescrever o arquivo de mem√≥ria
        print("‚ùóÔ∏è O arquivo JSON n√£o foi modificado devido ao erro.")


# --- PONTO DE ENTRADA E AGENDAMENTO (Sem altera√ß√µes aqui) ---

def executar_tarefa():
    print("\n----------------------------------------------------")
    print(f"[{time.ctime()}] Acionando a verifica√ß√£o agendada...")
    try:
        asyncio.run(monitorar_berzerk())
    except Exception as e:
        print(f"‚ùå Erro ao executar a tarefa ass√≠ncrona: {e}")
    print("----------------------------------------------------\n")

if __name__ == "__main__":
    if "7864806675:AAEg5rwZ_z2yPUmUkidYbuSPHjSTZb4m_K4" in BOT_TOKEN or "-1002512544169" in CHAT_ID:

        schedule.every(6).hours.do(executar_tarefa)
        
        print("‚úÖ Agendamento configurado! O script ir√° rodar a cada 6 hours.")
        print("üöÄ Executando a primeira verifica√ß√£o imediatamente...")
        
        executar_tarefa()

        while True:
            schedule.run_pending()
            time.sleep(1)
    else:
        print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        print("!!! ATEN√á√ÉO: PREENCHA SEU BOT_TOKEN E CHAT_ID NO C√ìDIGO!!!")
        print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
